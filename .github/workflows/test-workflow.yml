name: Mukesh - Setup docker

on:
  pull_request:
    branches:
      - trunk

jobs:
  # Runs the PHPUnit tests for WordPress.
  #
  # Performs the following steps:
  # - Sets environment variables.
  # - Checks out the repository.
  # - Sets up Node.js.
  # - Sets up PHP.
  # - Installs Composer dependencies.
  # - Installs npm dependencies
  # - Logs general debug information about the runner.
  # - Logs Docker debug information (about the Docker installation within the runner).
  # - Starts the WordPress Docker container.
  # - Logs the running Docker containers.
  # - Logs debug information about what's installed within the WordPress Docker containers.
  # - Install WordPress within the Docker container.
  # - Run the PHPUnit tests.
  # - Ensures version-controlled files are not modified or deleted.
  # - Checks out the WordPress Test reporter repository.
  # - Submit the test results to the WordPress.org host test results.
  test-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Configure environment variables
        run: |
          echo "PHP_FPM_UID=$(id -u)" >> $GITHUB_ENV
          echo "PHP_FPM_GID=$(id -g)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0

      - name: Set up Node.js
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          node-version-file: '.nvmrc'
          cache: npm
      ##
      # This allows Composer dependencies to be installed using a single step.
      #
      # Since the tests are currently run within the Docker containers where the PHP version varies,
      # the same PHP version needs to be configured for the action runner machine so that the correct
      # dependency versions are installed and cached.
      ##

      # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
      # passing a custom cache suffix ensures that the cache is flushed at least once per week.
      - name: Install Composer dependencies
        uses: ramsey/composer-install@83af392bf5f031813d25e6fe4cd626cdba9a2df6 # v2.2.0
        with:
          custom-cache-suffix: $(/bin/date -u --date='last Mon' "+%F")

      - name: Install npm dependencies
        run: |
          npm ci
          npm i puppeteer

      - name: General debug information
        run: |
          npm --version
          node --version
          curl --version
          git --version
          svn --version
          composer --version
          locale -a
          echo "LAST_COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}

      - name: Docker debug information
        run: |
          docker -v
          docker-compose -v

      - name: Start Docker environment
        run: |
          npm run env:start

      - name: Log running Docker containers
        run: docker ps -a

      - name: WordPress Docker container debug information
        run: |
          docker-compose run --rm mysql mysql --version
          docker-compose run --rm php php --version
          docker-compose run --rm php php -m
          docker-compose run --rm php php -i
          docker-compose run --rm php locale -a

      - name: Install WordPress
        run: npm run env:install
        
      - name: Puppeteer test
        run: |
          import puppeteer from 'puppeteer';

          (async () => {
            const browser = await puppeteer.launch();
            const page = await browser.newPage();

            await page.goto('https://developer.chrome.com/');

            // Set screen size
            await page.setViewport({width: 1080, height: 1024});

            // Type into search box
            await page.type('.search-box__input', 'automate beyond recorder');

            // Wait and click on first result
            const searchResultSelector = '.search-box__link';
            await page.waitForSelector(searchResultSelector);
            await page.click(searchResultSelector);

            // Localte the full title with a unique string
            const textSelector = await page.waitForSelector(
              'text/Customize and automate'
            );
            const fullTitle = await textSelector.evaluate(el => el.textContent);

            // Print the full title
            console.log('The title of this blog post is "%s".', fullTitle);

            await browser.close();
          })();
